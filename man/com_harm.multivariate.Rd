% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/harmonization.R
\name{com_harm.multivariate}
\alias{com_harm.multivariate}
\title{ComBat harmonization across measurements (multivariate)}
\usage{
com_harm.multivariate(
  bat,
  data,
  covar,
  model = lm,
  formula = NULL,
  ref.batch = NULL,
  eb = TRUE,
  stan = FALSE,
  robust.LS = FALSE,
  cov = FALSE,
  var_thresh = 0.95,
  min_rblock = 1,
  max_rblock = Inf,
  ...
)
}
\arguments{
\item{bat}{List of length \eqn{m}; each element is a factor (or coercible) of
length \code{n} with batch labels for that measurement. All must share the
same batch levels.}

\item{data}{List of length \eqn{m}; each element is an \eqn{n \times G}
matrix/data frame. All share identical feature columns (names and order) and
the same sample order (rows).}

\item{covar}{List of length \eqn{m} of covariate data frames (each \eqn{n \times q_i}),
or \code{NULL} to fit null models.}

\item{model}{Modeling function accepting \code{formula} and \code{data}
(e.g., \code{stats::lm}, \code{mgcv::gam}). Default \code{lm}.}

\item{formula}{RHS formula for covariates (excluding batch), e.g., \code{y ~ age + sex}.}

\item{ref.batch}{Optional reference batch level shared across measurements.}

\item{eb}{Logical; if \code{TRUE} (default) run multivariate EB shrinkage.}

\item{stan}{Logical; if \code{TRUE}, use the full Bayesian (Stan) multivariate routine.}

\item{robust.LS}{Logical; if \code{TRUE}, use robust estimators
(\code{\link{biweight_midvar}}, \code{\link{biweight_midvar_mul}}).}

\item{cov}{Logical; if \code{TRUE}, apply an additional CovBat-style PCA
score-space coupling across measurements after the main multivariate step
(default \code{FALSE}).}

\item{var_thresh}{Numeric in (0,1]; cumulative explained-variance threshold used
to choose how many PC scores per measurement are used in the stage-2 coupling
(default \code{0.95}).}

\item{min_rblock}{Integer; minimum number of PC scores per measurement used in
stage-2 coupling (default \code{1}).}

\item{max_rblock}{Integer; maximum number of PC scores per measurement used in
stage-2 coupling (default \code{Inf}).}

\item{...}{Additional arguments forwarded to \code{model}.}
}
\value{
A list with:
\describe{
\item{harm_data}{List of length \eqn{m}; each element is an \eqn{n \times G}
harmonized matrix on the original scale.}
\item{resid}{List of length \eqn{m} of standardized, batch-adjusted residuals.}
\item{eb_result}{(when \code{stan = FALSE}) Multivariate EB outputs:
\code{gamma_star} (per-batch \eqn{m \times G} means) and
\code{delta_star} (per-batch length-\eqn{G} list of \eqn{m \times m} covariances).}
\item{stan_result}{(when \code{stan = TRUE}) Output of \code{stan_algorithm()}, typically
including posterior summaries for \code{gamma_star}/\code{delta_star}
and MCMC diagnostics.}
}
}
\description{
End-to-end \emph{multivariate} ComBat-style harmonization for a list of
\eqn{m} measurements/modalities. For each feature, the batch effect is a mean
vector across measurements and an \eqn{m \times m} covariance; these are
shrunken via EB (or inferred via a \emph{fully Bayesian (Stan)} model),
residuals are whitened with \code{\link{sigma_inv_sqrt}}, and then mapped
back to the original scale.
}
\section{Full Bayesian (Stan) variant}{

With \code{stan = TRUE}, the per-feature mean vectors and covariance matrices
across measurements are sampled from their joint posterior (e.g., multivariate normal /
LKJ + half-t) using MCMC. \code{stan_data_prep()} prepares the
data; \code{stan_algorithm()} returns posterior summaries for the
harmonization step.
}

\examples{
\donttest{
set.seed(1)
n <- 30; G <- 5
Y1 <- matrix(rnorm(n*G), n, G, dimnames = list(NULL, paste0("feat", 1:G)))
Y2 <- Y1 + matrix(rnorm(n*G, sd = 0.5), n, G, dimnames = dimnames(Y1))
bat <- factor(sample(c("A","B","C"), n, TRUE))
bats <- lapply(1:2, function(i) bat)
covs <- list(data.frame(age = rnorm(n)), data.frame(age = rnorm(n)))
out_m <- com_harm.multivariate(
  bat = bats, data = list(Y1, Y2), covar = covs,
  model = lm, formula = y ~ age, ref.batch = "A", eb = FALSE
)
length(out_m$harm_data)
}

}
