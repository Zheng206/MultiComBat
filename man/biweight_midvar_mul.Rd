% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/robust_estimation.R
\name{biweight_midvar_mul}
\alias{biweight_midvar_mul}
\title{Robust covariance via Tukey biweight column aggregation}
\usage{
biweight_midvar_mul(centered_Zi, norm.unbiased = TRUE)
}
\arguments{
\item{centered_Zi}{Numeric matrix of size \eqn{m \times n} (rows = features,
columns = samples). Ideally row-centered; the function still computes row
medians and MADs internally.}

\item{norm.unbiased}{Logical; if \code{TRUE} (default), uses
\code{c = 9 / qnorm(0.75)} in the standardization under normality. If \code{FALSE}, uses \code{c = 9}.}
}
\value{
An \eqn{m \times m} numeric covariance matrix \code{Sigma_hat_ig}.
}
\description{
Builds a robust covariance matrix from a (features \eqn{\times} samples)
matrix by downweighting entire \emph{columns} (samples) that are extreme on
many rows using Tukey's biweight. For each row, standardized residuals
\eqn{u_{ij}} are formed with a rowwise MAD; per-cell weights are
\eqn{w_{ij} = (1-u_{ij}^2)^2 \mathbb{1}(|u_{ij}|<1)}. Column weights
\eqn{w_j \propto \sum_i w_{ij}} are normalized to sum to 1, and the
covariance is \eqn{\sum_j w_j\, x_{\cdot j} x_{\cdot j}^\top}.
}
\details{
For each row \eqn{i}, compute \eqn{\mathrm{MAD}_i} from that row and
\eqn{u_{ij} = x_{ij}/(c\,\mathrm{MAD}_i)} (with the row median as center).
Aggregate per-cell weights across rows to obtain column weights \eqn{w_j},
normalize them to sum to 1, then form the weighted sum of outer products.
This targets column-wise outliers (samples) rather than row-wise ones.
}
\note{
If any row has \code{MAD == 0} or if all \eqn{w_{ij}} are zero,
\code{sum(w_vec)} will be zero and the normalized column weights become
undefined. You may wish to guard against this and fall back to an unweighted
covariance or add a small epsilon to MADs.
}
\examples{
set.seed(1)
m <- 5; n <- 60
X <- matrix(rnorm(m * n), m, n)
X[, n] <- X[, n] + 8  # make one column a multivariate outlier

S_classic <- tcrossprod(X) / n
S_robust  <- biweight_midvar_mul(X)
dim(S_robust); all.equal(dim(S_robust), c(m, m))

}
\seealso{
\code{robustbase::covMcd} for a high-breakdown alternative.
}
